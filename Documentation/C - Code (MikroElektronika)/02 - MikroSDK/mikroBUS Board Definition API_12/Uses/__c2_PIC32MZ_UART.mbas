module __c2_PIC32MZ_UART
include __t_PIC32

#IFDEF ENABLE_UART THEN

sub function _uartInit_1 (dim cfg as ^const uint32_t) as T_mikrobus_ret  
sub function _uartInit_2 (dim cfg as ^const uint32_t) as T_mikrobus_ret  
sub function _uartInit_3 (dim cfg as ^const uint32_t) as T_mikrobus_ret  
sub function _uartInit_4 (dim cfg as ^const uint32_t) as T_mikrobus_ret  

#ENDIF

implements

const _MIKROBUS_ERR_UART          as byte = 5

' ------------------------------------------------------------ SYSTEM SPECIFIC '

#IFDEF ENABLE_UART THEN

sub function _uartInit_1 (dim cfg as ^const uint32_t) as T_mikrobus_ret   
dim arg1 as ^const uint32_t
    arg1 = (cfg + 0) 
	
	Unlock_IOLOCK()
    PPS_Mapping(_RPE8, _OUTPUT, _U2TX)
    PPS_Mapping(_RPE9, _INPUT, _U2RX)
    Lock_IOLOCK()
	
    UART2_Init(longword(arg1^))
    Result = 0
end sub

sub function _uartInit_2 (dim cfg as ^const uint32_t) as T_mikrobus_ret 
dim arg1 as ^const uint32_t
    arg1 = (cfg + 0) 

    Unlock_IOLOCK()
    PPS_Mapping(_RPA14, _OUTPUT, _U3TX)
    PPS_Mapping(_RPF5, _INPUT, _U3RX)
    Lock_IOLOCK()
	
    UART3_Init(longword(arg1^))
    Result = 0
end sub

sub function _uartInit_3 (dim cfg as ^const uint32_t) as T_mikrobus_ret 
dim arg1 as ^const uint32_t
    arg1 = (cfg + 0) 

    Unlock_IOLOCK()
    PPS_Mapping(_RPD15, _OUTPUT, _U1TX)
    PPS_Mapping(_RPD14, _INPUT, _U1RX)
    Lock_IOLOCK()
	
    UART1_Init(longword(arg1^))
    Result = 0
end sub

sub function _uartInit_4 (dim cfg as ^const uint32_t) as T_mikrobus_ret 
dim arg1 as ^const uint32_t
    arg1 = (cfg + 0) 

    Unlock_IOLOCK()
    PPS_Mapping(_RPD15, _OUTPUT, _U1TX)
    PPS_Mapping(_RPD14, _INPUT, _U1RX)
    Lock_IOLOCK()
	
    UART1_Init(longword(arg1^))
    Result = 0
end sub

#ENDIF

end.