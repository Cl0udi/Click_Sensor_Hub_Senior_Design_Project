module __c2_PIC32MZ_LOG
include __t_PIC32

#IFDEF ENABLE_LOG THEN

sub procedure _log_write(dim data_ as ^uint8_t)

sub function _log_init1(dim baud as uint32_t) as T_mikrobus_ret
sub function _log_init2(dim baud as uint32_t) as T_mikrobus_ret
sub function _log_init3(dim baud as uint32_t) as T_mikrobus_ret
sub function _log_init4(dim baud as uint32_t) as T_mikrobus_ret

#ENDIF

implements

const _MIKROBUS_ERR_LOG          as byte = 6

' ------------------------------------------------------------ SYSTEM SPECIFIC '

#IFDEF ENABLE_LOG THEN

dim logger as ^T_log_writeFp

sub function _log_init1(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0

    Unlock_IOLOCK()
    PPS_Mapping(_RPE8, _OUTPUT, _U2TX)
    PPS_Mapping(_RPE9, _INPUT, _U2RX)
    Lock_IOLOCK()
	
    UART2_Init(baud)
    logger = @UART2_Write
end sub

sub function _log_init2(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
	
	Unlock_IOLOCK()
    PPS_Mapping(_RPA14, _OUTPUT, _U3TX)
    PPS_Mapping(_RPF5, _INPUT, _U3RX)
    Lock_IOLOCK()
	
    UART3_Init(baud)
    logger = @UART3_Write
end sub

sub function _log_init3(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
	
	Unlock_IOLOCK()
    PPS_Mapping(_RPD15, _OUTPUT, _U1TX)
    PPS_Mapping(_RPD14, _INPUT, _U1RX)
    Lock_IOLOCK()
	
    UART1_Init(baud)
    logger = @UART1_Write
end sub

sub function _log_init4(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
	
	Unlock_IOLOCK()
    PPS_Mapping(_RPD15, _OUTPUT, _U1TX)
    PPS_Mapping(_RPD14, _INPUT, _U1RX)
    Lock_IOLOCK()

    UART1_Init(baud)
    logger = @UART1_Write
end sub


sub procedure _log_write(dim data_ as ^uint8_t)

    logger( data_^ )
end sub

#ENDIF

end.