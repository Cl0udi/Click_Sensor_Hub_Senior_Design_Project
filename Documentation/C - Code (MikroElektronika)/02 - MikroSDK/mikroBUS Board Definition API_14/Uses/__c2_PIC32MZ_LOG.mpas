unit __c2_PIC32MZ_LOG;
uses __t_PIC32;

{$IFDEF ENABLE_LOG}
function _log_init1(baud: uint32_t) : T_mikrobus_ret;
function _log_init2(baud: uint32_t) : T_mikrobus_ret;
function _log_init3(baud: uint32_t) : T_mikrobus_ret;
function _log_init4(baud: uint32_t) : T_mikrobus_ret;
    
procedure _log_write(data_: ^uint8_t);
{$ENDIF}

implementation

// ----------------------------------------------------------- SYSTEM SPECIFIC /

{$IFDEF ENABLE_LOG}

var logger : ^T_log_writeFp;

function _log_init1(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    Unlock_IOLOCK();
    PPS_Mapping(_RPE8, _OUTPUT, _U2TX);
    PPS_Mapping(_RPE9, _INPUT, _U2RX);
    Lock_IOLOCK();
	
    UART2_Init(baud);
    logger := @UART2_Write;
end;

function _log_init2(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    Unlock_IOLOCK();
    PPS_Mapping(_RPA14, _OUTPUT, _U3TX);
    PPS_Mapping(_RPF5, _INPUT, _U3RX);
    Lock_IOLOCK();
	
    UART3_Init(baud);
    logger := @UART3_Write;
end;

function _log_init3(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    Unlock_IOLOCK();
    PPS_Mapping(_RPD15, _OUTPUT, _U1TX);
    PPS_Mapping(_RPD14, _INPUT, _U1RX);
    Lock_IOLOCK();
	
    UART1_Init(baud);
    logger := @UART1_Write;
end;


function _log_init4(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    Unlock_IOLOCK();
    PPS_Mapping(_RPD15, _OUTPUT, _U1TX);
    PPS_Mapping(_RPD14, _INPUT, _U1RX);
    Lock_IOLOCK();
	
    UART1_Init(baud);
    logger := @UART1_Write;
end;


procedure _log_write(data_: ^uint8_t);
begin
    logger( data_^ );
end;

{$ENDIF}

end.