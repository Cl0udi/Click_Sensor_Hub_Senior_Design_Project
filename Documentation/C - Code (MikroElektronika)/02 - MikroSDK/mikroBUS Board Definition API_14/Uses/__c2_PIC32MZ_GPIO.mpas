unit __c2_PIC32MZ_GPIO;
uses __t_PIC32;

function  _getAN_1  () : uint8_t;
function  _getRST_1 () : uint8_t;
function  _getCS_1  () : uint8_t;
function  _getSCK_1 () : uint8_t;
function  _getMISO_1() : uint8_t;
function  _getMOSI_1() : uint8_t;
function  _getPWM_1 () : uint8_t;
function  _getINT_1 () : uint8_t;
function  _getRX_1  () : uint8_t;
function  _getTX_1  () : uint8_t;
function  _getSCL_1 () : uint8_t;
function  _getSDA_1 () : uint8_t;
procedure _setAN_1  (state: uint8_t);
procedure _setRST_1 (state: uint8_t);
procedure _setCS_1  (state: uint8_t);
procedure _setSCK_1 (state: uint8_t);
procedure _setMISO_1(state: uint8_t);
procedure _setMOSI_1(state: uint8_t);
procedure _setPWM_1 (state: uint8_t);
procedure _setINT_1 (state: uint8_t);
procedure _setRX_1  (state: uint8_t);
procedure _setTX_1  (state: uint8_t);
procedure _setSCL_1 (state: uint8_t);
procedure _setSDA_1 (state: uint8_t);

function  _getAN_2  () : uint8_t;    
function  _getRST_2 () : uint8_t;    
function  _getCS_2  () : uint8_t;    
function  _getSCK_2 () : uint8_t;    
function  _getMISO_2() : uint8_t;    
function  _getMOSI_2() : uint8_t;    
function  _getPWM_2 () : uint8_t;    
function  _getINT_2 () : uint8_t;    
function  _getRX_2  () : uint8_t;    
function  _getTX_2  () : uint8_t;    
function  _getSCL_2 () : uint8_t;    
function  _getSDA_2 () : uint8_t;    
procedure _setAN_2  (state: uint8_t);
procedure _setRST_2 (state: uint8_t);
procedure _setCS_2  (state: uint8_t);
procedure _setSCK_2 (state: uint8_t);
procedure _setMISO_2(state: uint8_t);
procedure _setMOSI_2(state: uint8_t);
procedure _setPWM_2 (state: uint8_t);
procedure _setINT_2 (state: uint8_t);
procedure _setRX_2  (state: uint8_t);
procedure _setTX_2  (state: uint8_t);
procedure _setSCL_2 (state: uint8_t);
procedure _setSDA_2 (state: uint8_t);

function  _getAN_3  () : uint8_t;    
function  _getRST_3 () : uint8_t;    
function  _getCS_3  () : uint8_t;    
function  _getSCK_3 () : uint8_t;    
function  _getMISO_3() : uint8_t;    
function  _getMOSI_3() : uint8_t;    
function  _getPWM_3 () : uint8_t;    
function  _getINT_3 () : uint8_t;    
function  _getRX_3  () : uint8_t;    
function  _getTX_3  () : uint8_t;    
function  _getSCL_3 () : uint8_t;    
function  _getSDA_3 () : uint8_t;    
procedure _setAN_3  (state: uint8_t);
procedure _setRST_3 (state: uint8_t);
procedure _setCS_3  (state: uint8_t);
procedure _setSCK_3 (state: uint8_t);
procedure _setMISO_3(state: uint8_t);
procedure _setMOSI_3(state: uint8_t);
procedure _setPWM_3 (state: uint8_t);
procedure _setINT_3 (state: uint8_t);
procedure _setRX_3  (state: uint8_t);
procedure _setTX_3  (state: uint8_t);
procedure _setSCL_3 (state: uint8_t);
procedure _setSDA_3 (state: uint8_t);

function  _getAN_4  () : uint8_t;    
function  _getRST_4 () : uint8_t;    
function  _getCS_4  () : uint8_t;    
function  _getSCK_4 () : uint8_t;    
function  _getMISO_4() : uint8_t;    
function  _getMOSI_4() : uint8_t;    
function  _getPWM_4 () : uint8_t;    
function  _getINT_4 () : uint8_t;    
function  _getRX_4  () : uint8_t;    
function  _getTX_4  () : uint8_t;    
function  _getSCL_4 () : uint8_t;    
function  _getSDA_4 () : uint8_t;    
procedure _setAN_4  (state: uint8_t);
procedure _setRST_4 (state: uint8_t);
procedure _setCS_4  (state: uint8_t);
procedure _setSCK_4 (state: uint8_t);
procedure _setMISO_4(state: uint8_t);
procedure _setMOSI_4(state: uint8_t);
procedure _setPWM_4 (state: uint8_t);
procedure _setINT_4 (state: uint8_t);
procedure _setRX_4  (state: uint8_t);
procedure _setTX_4  (state: uint8_t);
procedure _setSCL_4 (state: uint8_t);
procedure _setSDA_4 (state: uint8_t);


function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_2(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_3(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_4(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;

implementation

const _MIKROBUS_ERR_PIN  : byte = 1;                

const _GPIO_INPUT        : byte = 1;
const _GPIO_OUTPUT       : byte = 0;

const _MIKROBUS_AN_PIN   : byte = 0;
const _MIKROBUS_RST_PIN  : byte = 1;
const _MIKROBUS_CS_PIN   : byte = 2;
const _MIKROBUS_SCK_PIN  : byte = 3;
const _MIKROBUS_MISO_PIN : byte = 4;
const _MIKROBUS_MOSI_PIN : byte = 5;
const _MIKROBUS_PWM_PIN  : byte = 6;
const _MIKROBUS_INT_PIN  : byte = 7;
const _MIKROBUS_RX_PIN   : byte = 8;
const _MIKROBUS_TX_PIN   : byte = 9;
const _MIKROBUS_SCL_PIN  : byte = 10;
const _MIKROBUS_SDA_PIN  : byte = 11;

// ----------------------------------------------------------- SYSTEM SPECIFIC /

function  _getAN_1  () : uint8_t;     begin Result := RB4_bit;  end;
function  _getRST_1 () : uint8_t;     begin Result := RB3_bit;  end;
function  _getCS_1  () : uint8_t;     begin Result := RC2_bit;  end;
function  _getSCK_1 () : uint8_t;     begin Result := RG6_bit;  end;
function  _getMISO_1() : uint8_t;     begin Result := RC4_bit;  end;
function  _getMOSI_1() : uint8_t;     begin Result := RC1_bit;  end;
function  _getPWM_1 () : uint8_t;     begin Result := RB2_bit;  end;
function  _getINT_1 () : uint8_t;     begin Result := RB1_bit;  end;
function  _getRX_1  () : uint8_t;     begin Result := RE9_bit;  end;
function  _getTX_1  () : uint8_t;     begin Result := RE8_bit;  end;
function  _getSCL_1 () : uint8_t;     begin Result := RG8_bit;  end;
function  _getSDA_1 () : uint8_t;     begin Result := RG7_bit;  end;
procedure _setAN_1  (state: uint8_t); begin LATB4_bit := state; end;
procedure _setRST_1 (state: uint8_t); begin LATB3_bit := state; end;
procedure _setCS_1  (state: uint8_t); begin LATC2_bit := state; end;
procedure _setSCK_1 (state: uint8_t); begin LATG6_bit := state; end;
procedure _setMISO_1(state: uint8_t); begin LATC4_bit := state; end;
procedure _setMOSI_1(state: uint8_t); begin LATC1_bit := state; end;
procedure _setPWM_1 (state: uint8_t); begin LATB2_bit := state; end;
procedure _setINT_1 (state: uint8_t); begin LATB1_bit := state; end;
procedure _setRX_1  (state: uint8_t); begin LATE9_bit := state; end;
procedure _setTX_1  (state: uint8_t); begin LATE8_bit := state; end;
procedure _setSCL_1 (state: uint8_t); begin LATG8_bit := state; end;
procedure _setSDA_1 (state: uint8_t); begin LATG7_bit := state; end;

function  _getAN_2  () : uint8_t;     begin Result := RB13_bit;  end;
function  _getRST_2 () : uint8_t;     begin Result := RA10_bit;  end;
function  _getCS_2  () : uint8_t;     begin Result := RD9_bit ;  end;
function  _getSCK_2 () : uint8_t;     begin Result := RD10_bit;  end;
function  _getMISO_2() : uint8_t;     begin Result := RD11_bit;  end;
function  _getMOSI_2() : uint8_t;     begin Result := RA15_bit;  end;
function  _getPWM_2 () : uint8_t;     begin Result := RB14_bit;  end;
function  _getINT_2 () : uint8_t;     begin Result := RB15_bit;  end;
function  _getRX_2  () : uint8_t;     begin Result := RF5_bit ;  end;
function  _getTX_2  () : uint8_t;     begin Result := RA14_bit;  end;
function  _getSCL_2 () : uint8_t;     begin Result := RA2_bit ;  end;
function  _getSDA_2 () : uint8_t;     begin Result := RA3_bit ;  end;
procedure _setAN_2  (state: uint8_t); begin LATB13_bit := state; end;
procedure _setRST_2 (state: uint8_t); begin LATA10_bit := state; end;
procedure _setCS_2  (state: uint8_t); begin LATD9_bit  := state; end;
procedure _setSCK_2 (state: uint8_t); begin LATD10_bit := state; end;
procedure _setMISO_2(state: uint8_t); begin LATD11_bit := state; end;
procedure _setMOSI_2(state: uint8_t); begin LATA15_bit := state; end;
procedure _setPWM_2 (state: uint8_t); begin LATB14_bit := state; end;
procedure _setINT_2 (state: uint8_t); begin LATB15_bit := state; end;
procedure _setRX_2  (state: uint8_t); begin LATF5_bit  := state; end;
procedure _setTX_2  (state: uint8_t); begin LATA14_bit := state; end;
procedure _setSCL_2 (state: uint8_t); begin LATA2_bit  := state; end;
procedure _setSDA_2 (state: uint8_t); begin LATA3_bit  := state; end;

function  _getAN_3  () : uint8_t;     begin Result := RA1_bit ;  end;
function  _getRST_3 () : uint8_t;     begin Result := RD5_bit ;  end;
function  _getCS_3  () : uint8_t;     begin Result := RD4_bit ;  end;
function  _getSCK_3 () : uint8_t;     begin Result := RD1_bit ;  end;
function  _getMISO_3() : uint8_t;     begin Result := RD2_bit ;  end;
function  _getMOSI_3() : uint8_t;     begin Result := RD3_bit ;  end;
function  _getPWM_3 () : uint8_t;     begin Result := RE3_bit ;  end;
function  _getINT_3 () : uint8_t;     begin Result := RF4_bit ;  end;
function  _getRX_3  () : uint8_t;     begin Result := RD14_bit;  end;
function  _getTX_3  () : uint8_t;     begin Result := RD15_bit;  end;
function  _getSCL_3 () : uint8_t;     begin Result := RF8_bit ;  end;
function  _getSDA_3 () : uint8_t;     begin Result := RF2_bit ;  end;
procedure _setAN_3  (state: uint8_t); begin LATA1_bit  := state; end;
procedure _setRST_3 (state: uint8_t); begin LATD5_bit  := state; end;
procedure _setCS_3  (state: uint8_t); begin LATD4_bit  := state; end;
procedure _setSCK_3 (state: uint8_t); begin LATD1_bit  := state; end;
procedure _setMISO_3(state: uint8_t); begin LATD2_bit  := state; end;
procedure _setMOSI_3(state: uint8_t); begin LATD3_bit  := state; end;
procedure _setPWM_3 (state: uint8_t); begin LATE3_bit  := state; end;
procedure _setINT_3 (state: uint8_t); begin LATF4_bit  := state; end;
procedure _setRX_3  (state: uint8_t); begin LATD14_bit := state; end;
procedure _setTX_3  (state: uint8_t); begin LATD15_bit := state; end;
procedure _setSCL_3 (state: uint8_t); begin LATF8_bit  := state; end;
procedure _setSDA_3 (state: uint8_t); begin LATF2_bit  := state; end;

function  _getAN_4  () : uint8_t;     begin Result := RF13_bit;  end;
function  _getRST_4 () : uint8_t;     begin Result := RG14_bit;  end;
function  _getCS_4  () : uint8_t;     begin Result := RG12_bit;  end;
function  _getSCK_4 () : uint8_t;     begin Result := RD1_bit ;  end;
function  _getMISO_4() : uint8_t;     begin Result := RD2_bit ;  end;
function  _getMOSI_4() : uint8_t;     begin Result := RD3_bit ;  end;
function  _getPWM_4 () : uint8_t;     begin Result := RG0_bit ;  end;
function  _getINT_4 () : uint8_t;     begin Result := RF3_bit ;  end;
function  _getRX_4  () : uint8_t;     begin Result := RD14_bit;  end;
function  _getTX_4  () : uint8_t;     begin Result := RD15_bit;  end;
function  _getSCL_4 () : uint8_t;     begin Result := RF8_bit ;  end;
function  _getSDA_4 () : uint8_t;     begin Result := RF2_bit ;  end;
procedure _setAN_4  (state: uint8_t); begin LATF13_bit := state; end;
procedure _setRST_4 (state: uint8_t); begin LATG14_bit := state; end;
procedure _setCS_4  (state: uint8_t); begin LATG12_bit := state; end;
procedure _setSCK_4 (state: uint8_t); begin LATD1_bit  := state; end;
procedure _setMISO_4(state: uint8_t); begin LATD2_bit  := state; end;
procedure _setMOSI_4(state: uint8_t); begin LATD3_bit  := state; end;
procedure _setPWM_4 (state: uint8_t); begin LATG0_bit  := state; end;
procedure _setINT_4 (state: uint8_t); begin LATF3_bit  := state; end;
procedure _setRX_4  (state: uint8_t); begin LATD14_bit := state; end;
procedure _setTX_4  (state: uint8_t); begin LATD15_bit := state; end;
procedure _setSCL_4 (state: uint8_t); begin LATF8_bit  := state; end;
procedure _setSDA_4 (state: uint8_t); begin LATF2_bit  := state; end;

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : TRISB4_bit := direction;
        _MIKROBUS_RST_PIN   : TRISB3_bit := direction;
        _MIKROBUS_CS_PIN    : TRISC2_bit := direction;
        _MIKROBUS_SCK_PIN   : TRISG6_bit := direction;
        _MIKROBUS_MISO_PIN  : TRISC4_bit := direction;
        _MIKROBUS_MOSI_PIN  : TRISC1_bit := direction;
        _MIKROBUS_PWM_PIN   : TRISB2_bit := direction;
        _MIKROBUS_INT_PIN   : TRISB1_bit := direction;
        _MIKROBUS_RX_PIN    : TRISE9_bit := direction;
        _MIKROBUS_TX_PIN    : TRISE8_bit := direction;
        _MIKROBUS_SCL_PIN   : TRISG8_bit := direction;
        _MIKROBUS_SDA_PIN   : TRISG7_bit := direction
    else                     
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

function _gpioInit_2(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : TRISB13_bit := direction;
        _MIKROBUS_RST_PIN   : TRISA10_bit := direction;
        _MIKROBUS_CS_PIN    : TRISD9_bit  := direction;
        _MIKROBUS_SCK_PIN   : TRISD10_bit := direction;
        _MIKROBUS_MISO_PIN  : TRISD11_bit := direction;
        _MIKROBUS_MOSI_PIN  : TRISA15_bit := direction;
        _MIKROBUS_PWM_PIN   : TRISB14_bit := direction;
        _MIKROBUS_INT_PIN   : TRISB15_bit := direction;
        _MIKROBUS_RX_PIN    : TRISF5_bit  := direction;
        _MIKROBUS_TX_PIN    : TRISA14_bit := direction;
        _MIKROBUS_SCL_PIN   : TRISA2_bit  := direction;
        _MIKROBUS_SDA_PIN   : TRISA3_bit  := direction
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

function _gpioInit_3(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : TRISA1_bit  := direction;
        _MIKROBUS_RST_PIN   : TRISD5_bit  := direction;
        _MIKROBUS_CS_PIN    : TRISD4_bit  := direction;
        _MIKROBUS_SCK_PIN   : TRISD1_bit  := direction;
        _MIKROBUS_MISO_PIN  : TRISD2_bit  := direction;
        _MIKROBUS_MOSI_PIN  : TRISD3_bit  := direction;
        _MIKROBUS_PWM_PIN   : TRISE3_bit  := direction;
        _MIKROBUS_INT_PIN   : TRISF4_bit  := direction;
        _MIKROBUS_RX_PIN    : TRISD14_bit := direction;
        _MIKROBUS_TX_PIN    : TRISD15_bit := direction;
        _MIKROBUS_SCL_PIN   : TRISF8_bit  := direction;
        _MIKROBUS_SDA_PIN   : TRISF2_bit  := direction
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

function _gpioInit_4(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : TRISF13_bit  := direction;
        _MIKROBUS_RST_PIN   : TRISG14_bit  := direction;
        _MIKROBUS_CS_PIN    : TRISG12_bit  := direction;
        _MIKROBUS_SCK_PIN   : TRISD1_bit   := direction;
        _MIKROBUS_MISO_PIN  : TRISD2_bit   := direction;
        _MIKROBUS_MOSI_PIN  : TRISD3_bit   := direction;
        _MIKROBUS_PWM_PIN   : TRISG0_bit   := direction;
        _MIKROBUS_INT_PIN   : TRISF3_bit   := direction;
        _MIKROBUS_RX_PIN    : TRISD14_bit  := direction;
        _MIKROBUS_TX_PIN    : TRISD15_bit  := direction;
        _MIKROBUS_SCL_PIN   : TRISF8_bit   := direction;
        _MIKROBUS_SDA_PIN   : TRISF2_bit   := direction
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

end.