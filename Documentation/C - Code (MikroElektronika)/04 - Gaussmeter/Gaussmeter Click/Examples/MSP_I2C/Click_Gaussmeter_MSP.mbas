'
'Example for Gaussmeter Click
'
'    Date          : Mar 2018.
'    Author        : Nemanja Medakovic
'
'Test configuration MSP :
'    
'    MCU              : MSP432
'    Dev. Board       : Clicker 2 for MSP432
'    ARM Compiler ver : v6.0.0.0
'
'---
'
'Description :
'
'The application is composed of three sections :
'
'- System Initialization - Initializes peripherals and pins.
'- Application Initialization - Initializes I2C driver and performs click configuration.
'  The device is configured to work in Wake Up On Change mode.
'- Application Task - (code snippet) - Gets x, y and z axis measured data (without temperature) in microT.
'  Logs desired results on USBUART and repeats measurement every 400ms.
'
'
program Click_Gaussmeter_MSP

include Click_Gaussmeter_types
include Click_Gaussmeter_config

dim
    bufferData as float[4] 
    axisCheck as uint8_t 
    counter as uint8_t 
    indx as uint8_t 
    errorBit as uint8_t 
    text as char[100] 
    
sub procedure floatConv() 
dim
    count as uint8_t
    conCnt as uint8_t
    conVar as uint8_t
    conCnt = 0
    conVar = 0

    for count = 0 to 100-1
        if ((text[count] = ".")) then 
            conVar = 1 
        end if
        if ((conVar = 1)) then 
            inc(conCnt)
        end if
        if ((conCnt > 3)) then 
            if (((text[count] = "e") or (conVar = 2))) then 
                text[(count - (conCnt - 4))] = text[count] 
                text[count] = 0 
                conVar = 2 
            else 
                text[count] = 0 
            end if
        end if
    next count

end sub

sub procedure systemInit() 

    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT) 
    mikrobus_i2cInit(_MIKROBUS1, @_GAUSSMETER_I2C_CFG[0]) 
    mikrobus_logInit(_MIKROBUS2, 9600) 
    mikrobus_logWrite("Initializing...", _LOG_LINE) 
    Delay_ms(100) 

end sub

sub procedure applicationInit() 

    gaussmeter_i2cDriverInit(T_GAUSSMETER_P(@_MIKROBUS1_GPIO), T_GAUSSMETER_P(@_MIKROBUS1_I2C), 0x0C) 
    Delay_ms(200) 
    gaussmeter_enableMeasure(_GAUSSMETER_EN_Z_AXIS, _GAUSSMETER_EN_Y_AXIS, _GAUSSMETER_EN_X_AXIS, _GAUSSMETER_DIS_TEMP_MEAS) 
    gaussmeter_sendCommand(_GAUSSMETER_START_WOC_MODE_COMM) 
    gaussmeter_writeReg(_GAUSSMETER_CONFIG1_REG, (_GAUSSMETER_GAIN_7 or _GAUSSMETER_EN_Z_MEASURE_PLATES)) 
    gaussmeter_writeReg(_GAUSSMETER_CONFIG2_REG, ((_GAUSSMETER_WOC_DIFF_EN or _GAUSSMETER_TCMP_DIS) or _GAUSSMETER_BOTH_DRIVER)) 
    gaussmeter_writeReg(_GAUSSMETER_CONFIG3_REG, (_GAUSSMETER_RES_0 or 0x0801)) 
    mikrobus_logWrite("Gaussmeter is initialized", _LOG_LINE) 
    Delay_ms(400) 

end sub

sub procedure applicationTask() 

    errorBit = gaussmeter_getData(@bufferData[0]) 
    if (not errorBit) then 
        axisCheck = 1 
        indx = 0 
        for counter = 0 to 4-1
            select case (commandByteLow and axisCheck)
                case 1
                    mikrobus_logWrite("16-bit temperature value is: ", _LOG_TEXT) 
                    FloatToStr(bufferData[indx], text) 
                    floatConv() 
                    mikrobus_logWrite(text, _LOG_LINE) 
                    inc(indx)
                case 2
                    mikrobus_logWrite("X axis is: ", _LOG_TEXT) 
                    FloatToStr(bufferData[indx], text) 
                    floatConv() 
                    mikrobus_logWrite(text, _LOG_TEXT) 
                    mikrobus_logWrite(" microT", _LOG_LINE) 
                    inc(indx)
                case 4
                    mikrobus_logWrite("Y axis is: ", _LOG_TEXT) 
                    FloatToStr(bufferData[indx], text) 
                    floatConv() 
                    mikrobus_logWrite(text, _LOG_TEXT) 
                    mikrobus_logWrite(" microT", _LOG_LINE) 
                    inc(indx)
                case 8
                    mikrobus_logWrite("Z axis is: ", _LOG_TEXT) 
                    FloatToStr(bufferData[indx], text) 
                    floatConv() 
                    mikrobus_logWrite(text, _LOG_TEXT) 
                    mikrobus_logWrite(" microT", _LOG_LINE) 
                    inc(indx)
                case else
            end select
            axisCheck = (axisCheck << 1) 
        next counter
        mikrobus_logWrite("", _LOG_LINE) 
        Delay_ms(400) 
    end if

end sub

main :

    systemInit() 
    applicationInit() 
    while (1) 
        applicationTask() 
    wend

end.