' *
' * Project name:
'     microSD click (MMC Library Example)
' * Copyright:
'     (c) Mikroelektronika, 2014.
' * Revision History:
'     20140704:
'       - initial release (FJ);
' * Description:
'     MMC library test. Upon flashing, insert a microSD card into the
'     module, when you should receive the "Init-OK" message.
'     Then, you can experiment with MMC read and write functions,
'     and observe the results through the USART Terminal.
' * Test configuration:
'     MCU:             P32MX795F512L
'                      http://ww1.microchip.com/downloads/en/DeviceDoc/61156F.pdf
'     Dev.Board:       EasyPIC Fusion v7
'                      http://www.mikroe.com/easypic-fusion/
'     Oscillator:      XT-PLL, 80.000MHz
'     Ext. Modules:    microSD click Board  - ac:microSDclick
'                      http://www.mikroe.com/click/microsd/
'     SW:              mikroBasic PRO for PIC32
'                      http://www.mikroe.com/mikrobasic/pic32/
' * NOTES:
'     - Make sure that microSD card is properly formatted (to FAT16 or just FAT)
'       before testing it with this example.
'     - Place microSD click board at the mikroBUS socket 1 on the EasyPIC Fusion v7 board.
'     - Put PORTB switches in the middle (neutral) position.
'     - Turn on SPI switches at SW13 and microSD card switches at SW14.
'     - Turn on Rx and Tx switches (SW12.1 and SW12.1).

program microSD_click_Common

' microSD click module connections
dim Mmc_Chip_Select as sbit at LATC2_bit
    Mmc_Chip_Select_Direction as sbit at TRISC2_bit
    Mmc_Card_Detect as sbit at RB8_bit
    Mmc_Card_Detect_Direction as sbit at TRISB8_bit
' eof microSD click module connections

const FILL_CHAR = "m"
dim   i, SectorNo as word
dim   mmc_error as byte
dim   data_ok as bit

' Variables for MMC routines
  SectorData as byte[512]        ' Buffer for MMC sector reading/writing
  data_for_registers as byte[16] ' buffer for CID and CSD registers

' UART write text and new line (carriage return + line feed)
sub procedure UART_Write_Line(dim byref uart_text as string)
  UART2_Write_Text(uart_text)
  UART2_Write(13)
  UART2_Write(10)
end sub

' Display byte in hex
sub procedure printhex(dim i as byte)
dim high, low as byte
  
    high = i and 0xF0            ' High nibble
    high = high >> 4
    high = high + "0"
    if ( high > "9" ) then
      high = high + 7
    end if
    low = (i and 0x0F) + "0"     ' Low nibble
    if ( low > "9" ) then
      low = low + 7
    end if
    UART2_Write(high)
    UART2_Write(low)
end sub

main:
  AD1PCFG = 0xFFFF                 ' Configure AN pins as digital I/O
  JTAGEN_bit = 0                   ' Disable JTAG

  Mmc_Card_Detect_Direction = 1    ' Set card detection pin to be input

  UART2_Init(19200)                ' Initialize UART2 module
  Delay_ms(10)
  UART_Write_Line("Insert microSD Card")

  while(Mmc_Card_Detect)           ' Loop until card is detected
    nop
  wend

  Delay_ms(500)

  UART_Write_Line("microSD Card inserted")   ' microSD Card present report

  ' Initialize SPI3 module
  SPI3_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, 80, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE)

  ' initialise a MMC card
    mmc_error = Mmc_Init()
    if ( mmc_error = 0 ) then
      UART_Write_Line("MMC Init-OK")       ' If MMC present report
      else
        UART_Write_Line("MMC Init-error")  ' If error report
    end if
    ' Fill MMC buffer with same characters
    for i = 0 to 511
      SectorData[i] = FILL_CHAR
    next i

    ' Choose sector
    SectorNo = 590

    ' Write sector
    mmc_error = Mmc_Write_Sector(SectorNo, SectorData)
    if ( mmc_error = 0 ) then
      UART_Write_Line("Write-OK")
      else  ' if there are errors.....
        UART_Write_Line("Write-Error")
    end if

    ' Reading of CID register
    mmc_error = Mmc_Read_Cid(data_for_registers)
    if ( mmc_error = 0 ) then
      UART2_Write_Text("CID : ")
      for i = 0 to 15
        printhex(data_for_registers[i])
      next i
      UART_Write_Line("  ")
    else
      UART_Write_Line("CID-error")
    end if

    ' Reading of CSD register
    mmc_error = Mmc_Read_Csd(data_for_registers)
    if ( mmc_error = 0 ) then
      UART2_Write_Text("CSD : ")
      for i = 0 to 15
        printhex(data_for_registers[i])
      next i
        UART_Write_Line("  ")
      else
        UART_Write_Line("CSD-error")
    end if

    ' Read sector
    mmc_error = Mmc_Read_Sector(SectorNo, SectorData)
    if ( mmc_error = 0 ) then
      UART_Write_Line("Read-OK")
      ' Chech data match
      data_ok = 1
      for i = 0 to 511
        UART2_Write(SectorData[i])
        if (SectorData[i] <> FILL_CHAR) then
          data_ok = 0
          break
        end if
      next i
      
      if ( data_ok <> 0 ) then
        UART_Write_Line("Content-OK")
      else
        UART_Write_Line("Content-Error")
      end if
    else  ' if there are errors.....
      UART_Write_Line("Read-Error")
    end if

    ' Signal test end
    UART_Write_Line("Test End.")
end.