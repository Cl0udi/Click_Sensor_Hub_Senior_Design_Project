{*
 * Project name:
     microSD click (MMC Library Example)
 * Copyright:
     (c) Mikroelektronika, 2011.
 * Revision History:
     20111114:
       - initial release (FJ);
     20130627:
       - modified for EasyAVR v7 (MV);
 * Description:
     MMC library test. Upon flashing, insert a microSD card into the
     module, when you should receive the "Init-OK" message.
     Then, you can experiment with MMC read and write functions,
     and observe the results through the USART Terminal.
  * Test configuration:
     MCU:             ATmega32
                      http://www.atmel.com/Images/doc2503.pdf
     Dev.Board:       EasyAVR7
                      ac:EasyAVR7
                      http://www.mikroe.com/easyavr/
     Oscillator:      Oscillator Frequency 8.0000 MHz, 8.0000 MHz Crystal
     ext. modules:    microSD Click
                      ac:microSD_Click
                      http://www.mikroe.com/click/microsd/
     SW:              mikroPascal PRO for AVR
                      http://www.mikroe.com/mikropascal/avr/
  * NOTES:
     - Make sure that microSD card is properly formatted (to FAT16 or just FAT)
       before testing it with this example.
     - Place microSD click board at the mikroBUS socket 1 on the EasyAVR7 board.
     - Put power supply jumper (J5) on the EasyPIC7 board in 3.3V position.
     - Make sure all pull down / pull up switches are in neutral position.
     - Turn on Rx and Tx switches (SW10.1 and SW10.2) and place appropriate jumpers
       in the RS-232 position or USB UART position
     - Connect RS-232 or USB cable to the respective UART connectors.
	 - Turn ON SW5.4 , SW5.5 , SW5.6
 *}

program microSD_click_Common;

// microSD click module connections
var Mmc_Chip_Select : sbit at PORTA5_bit;
    Mmc_Chip_Select_Direction : sbit at DDA5_bit;
    Mmc_Card_Detect : sbit at PORTA7_bit;
    Mmc_Card_Detect_Direction : sbit at DDA7_bit;
// eof microSD click module connections

const FILL_CHAR = 'm';
var   i, SectorNo : word;
var   mmc_error : byte;
var   data_ok : bit;

// Variables for MMC routines
  SectorData : array[512] of byte;        // Buffer for MMC sector reading/writing
  data_for_registers : array[16] of byte; // buffer for CID and CSD registers

// UART write text and new line (carriage return + line feed)
procedure UART_Write_Line( var uart_text : string );
  begin
    UART1_Write_Text(uart_text);
    UART1_Write(13);
    UART1_Write(10);
  end;

// Display byte in hex
procedure printhex( i : byte );
var high, low : byte;
  begin
    high := i and 0xF0;               // High nibble
    high := high shr 4;
    high := high + '0';
    if ( high > '9' ) then
      high := high + 7;
    low := (i and 0x0F) + '0';        // Low nibble
    if ( low > '9' ) then
      low := low + 7 ;

    UART1_Write(high);
    UART1_Write(low);
  end;

begin

  Mmc_Card_Detect_Direction := 0;  // Set card detection pin to be input

  UART1_Init(19200);               // Initialize UART1 module
  Delay_ms(10);
  UART_Write_Line('Insert microSD Card');

  while (Mmc_Card_Detect) do         // Loop until card is detected
    nop;

  Delay_ms(500);

  UART_Write_Line('microSD Card inserted');  // microSD Card present report

  // Initialize SPI1 module
  SPI1_Init_Advanced(_SPI_MASTER, _SPI_FCY_DIV4, _SPI_CLK_LO_LEADING);

  // initialise a MMC card
  mmc_error := Mmc_Init();
  if ( mmc_error = 0 ) then
    UART_Write_Line('MMC Init-OK')     // If MMC present report
  else
    UART_Write_Line('MMC Init-error'); // If error report

  // Fill MMC buffer with same characters
  for i := 0 to 511 do
    SectorData[i] := FILL_CHAR;

  // Choose sector
  SectorNo := 590;

  // Write sector
  mmc_error := Mmc_Write_Sector(SectorNo, SectorData);
  if ( mmc_error = 0 ) then
    UART_Write_Line('Write-OK')
  else  // if there are errors.....
    UART_Write_Line('Write-Error');

  // Reading of CID register
  mmc_error := Mmc_Read_Cid(data_for_registers);
  if ( mmc_error = 0 ) then
    begin
      UART1_Write_Text('CID : ');
      for i := 0 to 15 do
        printhex(data_for_registers[i]);
      UART_Write_Line('  ');
    end
  else
    UART_Write_Line('CID-error');

  // Reading of CSD register
  mmc_error := Mmc_Read_Csd(data_for_registers);
  if ( mmc_error = 0 ) then
    begin
      UART1_Write_Text('CSD : ');
      for i := 0 to 15 do
        printhex(data_for_registers[i]);
      UART_Write_Line('  ');
    end
  else
    UART_Write_Line('CSD-error');

  // Read sector
  mmc_error := Mmc_Read_Sector(SectorNo, SectorData);
  if ( mmc_error = 0 ) then
    begin
      UART_Write_Line('Read-OK');
      // Chech data match
      data_ok := 1;
      for i := 0 to 511 do
        begin
          UART1_Write(SectorData[i]);
         if (SectorData[i] <> FILL_CHAR) then
            begin
              data_ok := 0;
              break;
            end;
        end;

      if ( data_ok <> 0 ) then
        UART_Write_Line('Content-OK')
      else
        UART_Write_Line('Content-Error');
    end
  else  // if there are errors.....
    UART_Write_Line('Read-Error');

  // Signal test end
  UART_Write_Line('Test End.');
end.