' *
' * Project name:
'     microSD click FAT16 (Demonstration of usage of Mmc_Fat16 library)
' * Copyright:
'     (c) Mikroelektronika, 2012.
' * Revision History:
'     20120615:
'       - initial release (DO);
' * Description:
'     This project consists of several blocks that demonstrate various aspects of
'     usage of the Mmc_Fat16 library. These are:
'     - Creation of new file and writing down to it;
'     - Opening existing file and re-writing it (writing from start-of-file);
'     - Opening existing file and appending data to it (writing from end-of-file);
'     - Opening a file and reading data from it (sending it to USART terminal);
'     - Creating and modifying several files at once;
'     - Reading file contents;
'     - Deleting file(s);
'     - Creating the swap file (see Help for details);
' * Test configuration:
'     MCU:             dsPIC30F4013
'                      http://ww1.microchip.com/downloads/en/devicedoc/70138c.pdf
'     Dev.Board:       EasyPIC v7 for dsPIC30
'                      http://www.mikroe.com/eng/products/view/887/easypic-v7-for-dspic-development-system/
'     Oscillator:      XT-PLL 80.0000 MHz, 10.0000 MHz Crystal
'     Ext. Modules:    microSD click Board  - ac:microSDclick
'                      http://www.mikroe.com/eng/products/view/776/microsd-click/
'     SW:              mikroBasic PRO for dsPIC
'                      http://www.mikroe.com/eng/products/view/229/mikrobasic-pro-for-dspic/
' * NOTES:
'     - Make sure that microSD card is properly formatted (to FAT16 or just FAT)
'       before testing it with this example.
'     - Place microSD click board at the mikroBUS socket 1.
'     - Put power supply jumper (J16) on the board in 3.3V position.
'     - Put PORTA switches in the middle (neutral) position.
'     - Turn on Rx and Tx of UART2 - UART switches (SW8.2 and SW9.2).
'     - Put jumpers J20 and J21 in USB possition .
'     - Connect USB cable to the respective connector (USB UART).

program microSD_click_FAT16

' MMC module connections
dim Mmc_Chip_Select           as sbit at LATB11_bit  ' for writing to output pin always use latch (PIC18 family)
    Mmc_Chip_Select_Direction as sbit at TRISB11_bit
    Mmc_Card_Detect           as sbit at RB6_bit     ' for detecting microSD card presence
    Mmc_Card_Detect_Direction as sbit at TRISB6_bit

const LINE_LEN = 43

dim
  err_txt as string[20]
  file_contents as string[LINE_LEN]

  filename as string[14] ' File names

  character as byte
  loop_, loop2 as byte
  size as longint

' UART write text and new line (carriage return + line feed)
sub procedure UART2_Write_Line( dim byref uart_text as string )
  UART2_Write_Text(uart_text)
  UART2_Write(13)
  UART2_Write(10)
end sub

' Creates new file and writes some data to it
sub procedure M_Create_New_File()
  filename[7] = "A"                ' Set filename for single-file tests
  Mmc_Fat_Set_File_Date(2010, 4, 19, 9, 0, 0)    ' Set file date & time info
  Mmc_Fat_Assign(filename, 0xA0)   ' Will not find file and then create file
  Mmc_Fat_Rewrite                  ' To clear file and start with new data
  for loop_=1 to 99                '  We want 5 files on the MMC card
    UART2_Write(".")
    file_contents[0] = loop_ div 10 + 48
    file_contents[1] = loop_ mod 10 + 48
    Mmc_Fat_Write(file_contents, LINE_LEN-1)   ' write data to the assigned file
  next loop_
end sub

' Creates many new files and writes data to them
sub procedure M_Create_Multiple_Files()
  for loop2 = "B" to "Z"
    UART2_Write(loop2)                 ' signal the progress
    filename[7] = loop2                ' set filename
    Mmc_Fat_Set_File_Date(2010, 4, 19, 9, 0, 0)      ' Set file date & time info
    Mmc_Fat_Assign(filename, 0xA0)     ' find existing file or create a new one
    Mmc_Fat_Rewrite                    ' To clear file and start with new data
    for loop_ = 1 to 44
      file_contents[0] = byte(loop_ div 10 + 48)
      file_contents[1] = byte(loop_ mod 10 + 48)
      Mmc_Fat_Write(file_contents, LINE_LEN-1) ' write data to the assigned file
    next loop_
  next loop2
end sub

' Opens an existing file and rewrites it
sub procedure M_Open_File_Rewrite()
  filename[7] = "C"                    ' Set filename for single-file tests
  Mmc_Fat_Assign(filename, 0)
  Mmc_Fat_Rewrite
  for loop_ = 1 to 55
    file_contents[0] = byte(loop_ div 10 + 48)
    file_contents[1] = byte(loop_ mod 10 + 48)
    Mmc_Fat_Write(file_contents, 42)   ' write data to the assigned file
  next loop_
end sub

' Opens an existing file and appends data to it (and alters the date/time stamp)
sub procedure M_Open_File_Append()
  filename[7] = "B"
  Mmc_Fat_Assign(filename, 0)
   Mmc_Fat_Set_File_Date(2010, 9, 20, 10, 21, 1)
  Mmc_Fat_Append()                                 ' Prepare file for append
  file_contents = " for mikroElektronika 2010"     ' Prepare file for append
  file_contents[26] = 13                           ' CR
  file_contents[27] = 10                           ' LF
  Mmc_Fat_Write(file_contents, 27)                 ' Write data to assigned file
end sub

' Opens an existing file, reads data from it and puts it to USART
sub procedure M_Open_File_Read()
  filename[7] = "B"
  Mmc_Fat_Assign(filename, 0)
  Mmc_Fat_Reset(size)            ' To read file, sub procedure returns size of file
  while size > 0
    Mmc_Fat_Read(character)
    UART2_Write(character)       ' Write data to UART
    Dec(size)
  wend
end sub

' Deletes a file. If file doesn't exist, it will first be created and then deleted.
sub procedure M_Delete_File()
  filename[7] = "F"
  Mmc_Fat_Assign(filename, 0)
  Mmc_Fat_Delete
end sub

' Tests whether file exists, and if so sends its creation date and file size via USART
sub procedure M_Test_File_Exist
dim
  fsize as longint
  year as word
  month_, day, hour_, minute_ as byte
  outstr as char[12]

  filename[7] = "B"
  if Mmc_Fat_Assign(filename, 0) <> 0 then
    ' File has been found - get its date
    Mmc_Fat_Get_File_Date(year,month_,day,hour_,minute_)
    UART2_Write_Text(" created: ")
    WordToStr(year, outstr)
    UART2_Write_Text(outstr)
    ByteToStr(month_, outstr)
    UART2_Write_Text(outstr)
    WordToStr(day, outstr)
    UART2_Write_Text(outstr)
    WordToStr(hour_, outstr)
    UART2_Write_Text(outstr)
    WordToStr(minute_, outstr)
    UART2_Write_Text(outstr)

    ' File has been found - get its modified date
    Mmc_Fat_Get_File_Date_Modified(year, month_, day, hour_, minute_)
    UART2_Write_Text(" modified: ")
    WordToStr(year, outstr)
    UART2_Write_Text(outstr)
    ByteToStr(month_, outstr)
    UART2_Write_Text(outstr)
    WordToStr(day, outstr)
    UART2_Write_Text(outstr)
    WordToStr(hour_, outstr)
    UART2_Write_Text(outstr)
    WordToStr(minute_, outstr)
    UART2_Write_Text(outstr)

    ' Get file size
    fsize = Mmc_Fat_Get_File_Size
    LongIntToStr(fsize, outstr)
    UART2_Write_Line(outstr)
  else
    ' Gile was not found - signal it
    UART2_Write(0x55)
    Delay_ms(1000)
    UART2_Write(0x55)
  end if
end sub

' Tries to create a swap file, whose size will be at least 100 sectors (see Help for details)
sub procedure M_Create_Swap_File()
  dim i as word

  size = Mmc_Fat_Get_Swap_File(5000, "mikroE.txt", 0x20)   ' see help on this sub function for details
  if (size <> 0) then
    for i=0 to 511
      f16_sector.fSect[i] = i
    next i
    LongIntToStr(size, err_txt)
    UART2_Write_Line(err_txt)
    for i=0 to 4999
      Mmc_Write_Sector(size, f16_sector.fSect)
      Inc(size)
      UART2_Write(".")
    next i
  end if
end sub


main:
  err_txt = "FAT16 not found"
  file_contents = "XX MMC/SD FAT16 library by Anton Rieckert#"
  file_contents[41] = 10                ' newline
  filename = "MIKRO00x.TXT"
  
  ADPCFG = 0xFFFF                       ' Configure ports as digital I/O


  Mmc_Card_Detect_Direction = 1         ' Set card detection pin to be input

  UART2_Init(19200)                     ' Initialize UART2 module
  Delay_ms(10)
  UART2_Write_Line("Insert microSD Card")

  while(Mmc_Card_Detect)                ' Loop until card is detected
    nop
  wend

  Delay_ms(500)

  UART2_Write_Line("microSD Card inserted")   ' microSD Card present report

  ' Initialize SPI1 module and set pointer(s) to SPI1 functions
  SPI1_Init_Advanced(_SPI_MASTER, _SPI_8_BIT,_SPI_PRESCALE_SEC_8, _SPI_PRESCALE_PRI_1, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_IDLE_2_ACTIVE)
  
  ' Use fat16 quick format instead of init routine if a formatting is needed
  if Mmc_Fat_Init() = 0 then
    ' Signal start-of-test
    ' Test sub functions
    M_Create_New_File()
    M_Create_Multiple_Files()
    M_Open_File_Rewrite()
    M_Open_File_Append()
    M_Open_File_Read()
    M_Delete_File()
    M_Test_File_Exist()
    M_Create_Swap_File()
    ' Signal end-of-test
    UART2_Write_Line("Test End.")
  else
    UART2_Write_Line(err_txt) ' Note: Mmc_Fat_Init tries to initialize a card more than once.
                              '       If card is not present, initialization may last longer (depending on clock speed)
  end if
end.